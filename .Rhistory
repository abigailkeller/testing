# test expectation
expect_true(all(c('p10','phi[1]','alpha[1]') %in% output_params))
# test expectation
expect_true(fit$model@par_dims$phi == 1)
# test expectation
expect_true(out@par_dims$phi == 1)
# constants
nsite <- 50
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
beta <- 0.5
log_p10 <- -4.5
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
count[i,] <- rpois(nobs_count, mu[i])
}
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(beta))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = exp(log_p10),
alpha = beta
)
names(inits[[1]]) <- c('mu','p10','alpha')
cov =  NULL
family = 'poisson'
p10priors = c(1,20)
q = FALSE
phipriors = NULL
multicore = FALSE
initial_values = inits
n.chain = 1
n.iter.burn = 100
n.iter.sample = 75
thin = 1
adapt_delta = 0.9
verbose = TRUE
seed = NULL
moddat <- get_model_data(data,cov,family,p10priors,q,phipriors,
multicore,initial_values,n.chain,n.iter.burn,
n.iter.sample,thin,adapt_delta,verbose,seed)
# moddat <- get_model_data_trad(data, family,q,phipriors,multicore,
#                                           initial_values,n.chain,n.iter.burn,
#                                           n.iter.sample,thin,adapt_delta,
#                                           verbose, seed)
model_data <- moddat[[1]]
inits <- moddat[[2]]
# run model
out <- rstan::sampling(
model_count_new,
data = model_data,
cores = 1,
#' @srrstats {G2.4,G2.4a} explicit conversion to
#'   integers for sampling arguments
chains = n.chain,
thin = as.integer(thin),
warmup = as.integer(n.iter.burn),
iter = (
as.integer(n.iter.burn) + as.integer(n.iter.sample)
),
init = inits,
refresh = ifelse(verbose == TRUE,500,0)
)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(out)))
output_params
# test expectation
expect_true(all(c('p10','alpha[1]') %in% output_params))
output_params_fix <- output_params
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
q <- 2
phi <- 10
# traditional type
count_type <- cbind(matrix(1, nrow = nsite, ncol = nobs_count/2),
matrix(2, nrow = nsite, ncol = nobs_count/2))
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rnbinom(n = 1, mu = mu[i], size = phi)
} else {
count[i,j] <- rnbinom(n = 1, mu = mu[i]*q, size = phi)
}
}
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
count.type = count_type,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = exp(log_p10),
alpha = alpha,
q = q,
phi = phi
)
names(inits[[1]]) <- c('mu','p10','alpha','q','phi'
)
cov =  c('var_a','var_b')
family = 'negbin'
p10priors = c(1,20)
q = TRUE
phipriors = NULL
multicore = FALSE
initial_values = inits
n.chain = 1
n.iter.burn = 100
n.iter.sample = 75
thin = 1
adapt_delta = 0.9
verbose = TRUE
seed = NULL
moddat <- get_model_data(data,cov,family,p10priors,q,phipriors,
multicore,initial_values,n.chain,n.iter.burn,
n.iter.sample,thin,adapt_delta,verbose,seed)
# moddat <- get_model_data_trad(data, family,q,phipriors,multicore,
#                                           initial_values,n.chain,n.iter.burn,
#                                           n.iter.sample,thin,adapt_delta,
#                                           verbose, seed)
model_data <- moddat[[1]]
inits <- moddat[[2]]
# run model
out <- rstan::sampling(
model_count_new,
data = model_data,
cores = 1,
#' @srrstats {G2.4,G2.4a} explicit conversion to
#'   integers for sampling arguments
chains = n.chain,
thin = as.integer(thin),
warmup = as.integer(n.iter.burn),
iter = (
as.integer(n.iter.burn) + as.integer(n.iter.sample)
),
init = inits,
refresh = ifelse(verbose == TRUE,500,0)
)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(out)))
output_params
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
q <- 2
# traditional type
count_type <- cbind(matrix(1, nrow = nsite, ncol = nobs_count/2),
matrix(2, nrow = nsite, ncol = nobs_count/2))
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rpois(n = 1, mu[i])
} else {
count[i,j] <- rpois(n = 1, mu[i]*q)
}
}
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
count.type = count_type,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = exp(log_p10),
alpha = alpha
)
names(inits[[1]]) <- c('mu','p10','alpha'
)
cov =  c('var_a','var_b')
family = 'poisson'
p10priors = c(1,20)
q = TRUE
phipriors = NULL
multicore = FALSE
initial_values = inits
n.chain = 1
n.iter.burn = 100
n.iter.sample = 75
thin = 1
adapt_delta = 0.9
verbose = TRUE
seed = NULL
moddat <- get_model_data(data,cov,family,p10priors,q,phipriors,
multicore,initial_values,n.chain,n.iter.burn,
n.iter.sample,thin,adapt_delta,verbose,seed)
# moddat <- get_model_data_trad(data, family,q,phipriors,multicore,
#                                           initial_values,n.chain,n.iter.burn,
#                                           n.iter.sample,thin,adapt_delta,
#                                           verbose, seed)
model_data <- moddat[[1]]
inits <- moddat[[2]]
# run model
out <- rstan::sampling(
model_count_new,
data = model_data,
cores = 1,
#' @srrstats {G2.4,G2.4a} explicit conversion to
#'   integers for sampling arguments
chains = n.chain,
thin = as.integer(thin),
warmup = as.integer(n.iter.burn),
iter = (
as.integer(n.iter.burn) + as.integer(n.iter.sample)
),
init = inits,
refresh = ifelse(verbose == TRUE,500,0)
)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(out)))
output_params
# test expectation
expect_true(all(c('p10','q[1]','alpha[1]','alpha[2]',
'alpha[3]') %in% output_params))
output_params_fix
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
phi <- 10
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
count[i,] <- rnbinom(n = nobs_count, mu = mu[i], size = phi)
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = exp(log_p10),
alpha = alpha,
phi = phi
)
names(inits[[1]]) <- c('mu','p10','alpha',
'phi')
cov =  c('var_a','var_b')
family = 'negbin'
p10priors = c(1,20)
q = FALSE
phipriors = NULL
multicore = FALSE
initial_values = inits
n.chain = 1
n.iter.burn = 100
n.iter.sample = 75
thin = 1
adapt_delta = 0.9
verbose = TRUE
seed = NULL
moddat <- get_model_data(data,cov,family,p10priors,q,phipriors,
multicore,initial_values,n.chain,n.iter.burn,
n.iter.sample,thin,adapt_delta,verbose,seed)
# moddat <- get_model_data_trad(data, family,q,phipriors,multicore,
#                                           initial_values,n.chain,n.iter.burn,
#                                           n.iter.sample,thin,adapt_delta,
#                                           verbose, seed)
model_data <- moddat[[1]]
inits <- moddat[[2]]
# run model
out <- rstan::sampling(
model_count_new,
data = model_data,
cores = 1,
#' @srrstats {G2.4,G2.4a} explicit conversion to
#'   integers for sampling arguments
chains = n.chain,
thin = as.integer(thin),
warmup = as.integer(n.iter.burn),
iter = (
as.integer(n.iter.burn) + as.integer(n.iter.sample)
),
init = inits,
refresh = ifelse(verbose == TRUE,500,0)
)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(out)))
output_params
output_params_fix <- output_params
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
count[i,] <- rpois(nobs_count, mu[i])
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = exp(log_p10),
alpha = alpha
)
names(inits[[1]]) <- c('mu','p10','alpha'
)
cov =  c('var_a','var_b')
family = 'poisson'
p10priors = c(1,20)
q = FALSE
phipriors = NULL
multicore = FALSE
initial_values = inits
n.chain = 1
n.iter.burn = 100
n.iter.sample = 75
thin = 1
adapt_delta = 0.9
verbose = TRUE
seed = NULL
moddat <- get_model_data(data,cov,family,p10priors,q,phipriors,
multicore,initial_values,n.chain,n.iter.burn,
n.iter.sample,thin,adapt_delta,verbose,seed)
# moddat <- get_model_data_trad(data, family,q,phipriors,multicore,
#                                           initial_values,n.chain,n.iter.burn,
#                                           n.iter.sample,thin,adapt_delta,
#                                           verbose, seed)
model_data <- moddat[[1]]
inits <- moddat[[2]]
# run model
out <- rstan::sampling(
model_count_new,
data = model_data,
cores = 1,
#' @srrstats {G2.4,G2.4a} explicit conversion to
#'   integers for sampling arguments
chains = n.chain,
thin = as.integer(thin),
warmup = as.integer(n.iter.burn),
iter = (
as.integer(n.iter.burn) + as.integer(n.iter.sample)
),
init = inits,
refresh = ifelse(verbose == TRUE,500,0)
)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(out)))
output_params
