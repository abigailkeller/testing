// Generated by rstantools.  Do not edit by hand.

/*
    eDNAjoint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    eDNAjoint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with eDNAjoint.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_joint_continuous_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 224> locations_array__ =
  {" (found before start of program)",
  " (in 'joint_continuous', line 368, column 4 to column 26)",
  " (in 'joint_continuous', line 369, column 4 to column 51)",
  " (in 'joint_continuous', line 370, column 4 to column 44)",
  " (in 'joint_continuous', line 371, column 4 to column 27)",
  " (in 'joint_continuous', line 372, column 4 to column 43)",
  " (in 'joint_continuous', line 373, column 4 to column 45)",
  " (in 'joint_continuous', line 376, column 2 to column 49)",
  " (in 'joint_continuous', line 377, column 2 to column 47)",
  " (in 'joint_continuous', line 378, column 2 to column 51)",
  " (in 'joint_continuous', line 379, column 2 to column 37)",
  " (in 'joint_continuous', line 380, column 2 to column 35)",
  " (in 'joint_continuous', line 411, column 2 to column 20)",
  " (in 'joint_continuous', line 412, column 2 to column 32)",
  " (in 'joint_continuous', line 413, column 2 to column 11)",
  " (in 'joint_continuous', line 414, column 2 to column 42)",
  " (in 'joint_continuous', line 415, column 2 to column 25)",
  " (in 'joint_continuous', line 381, column 2 to column 38)",
  " (in 'joint_continuous', line 382, column 2 to column 69)",
  " (in 'joint_continuous', line 383, column 2 to column 35)",
  " (in 'joint_continuous', line 385, column 4 to column 49)",
  " (in 'joint_continuous', line 384, column 2 to line 385, column 49)",
  " (in 'joint_continuous', line 387, column 6 to column 44)",
  " (in 'joint_continuous', line 386, column 17 to line 388, column 5)",
  " (in 'joint_continuous', line 386, column 2 to line 388, column 5)",
  " (in 'joint_continuous', line 418, column 2 to column 21)",
  " (in 'joint_continuous', line 420, column 4 to column 20)",
  " (in 'joint_continuous', line 419, column 2 to line 420, column 20)",
  " (in 'joint_continuous', line 421, column 2 to column 36)",
  " (in 'joint_continuous', line 422, column 2 to line 424, column 32)",
  " (in 'joint_continuous', line 427, column 2 to line 430, column 42)",
  " (in 'joint_continuous', line 392, column 16 to column 19)",
  " (in 'joint_continuous', line 392, column 4 to column 21)",
  " (in 'joint_continuous', line 393, column 4 to column 77)",
  " (in 'joint_continuous', line 395, column 6 to column 58)",
  " (in 'joint_continuous', line 394, column 21 to line 396, column 5)",
  " (in 'joint_continuous', line 394, column 4 to line 396, column 5)",
  " (in 'joint_continuous', line 398, column 6 to column 50)",
  " (in 'joint_continuous', line 397, column 20 to line 399, column 5)",
  " (in 'joint_continuous', line 397, column 4 to line 399, column 5)",
  " (in 'joint_continuous', line 402, column 9 to column 56)",
  " (in 'joint_continuous', line 401, column 25 to line 403, column 8)",
  " (in 'joint_continuous', line 401, column 7 to line 403, column 8)",
  " (in 'joint_continuous', line 400, column 4 to line 403, column 8)",
  " (in 'joint_continuous', line 405, column 2 to column 47)",
  " (in 'joint_continuous', line 406, column 2 to column 49)",
  " (in 'joint_continuous', line 407, column 2 to column 55)",
  " (in 'joint_continuous', line 408, column 2 to column 56)",
  " (in 'joint_continuous', line 342, column 4 to column 21)",
  " (in 'joint_continuous', line 343, column 4 to column 23)",
  " (in 'joint_continuous', line 344, column 4 to column 21)",
  " (in 'joint_continuous', line 345, column 10 to column 13)",
  " (in 'joint_continuous', line 345, column 4 to column 34)",
  " (in 'joint_continuous', line 346, column 10 to column 15)",
  " (in 'joint_continuous', line 346, column 4 to column 36)",
  " (in 'joint_continuous', line 347, column 10 to column 13)",
  " (in 'joint_continuous', line 347, column 4 to column 34)",
  " (in 'joint_continuous', line 348, column 4 to column 26)",
  " (in 'joint_continuous', line 349, column 4 to column 27)",
  " (in 'joint_continuous', line 350, column 10 to column 19)",
  " (in 'joint_continuous', line 350, column 4 to column 43)",
  " (in 'joint_continuous', line 351, column 10 to column 18)",
  " (in 'joint_continuous', line 351, column 4 to column 41)",
  " (in 'joint_continuous', line 352, column 10 to column 13)",
  " (in 'joint_continuous', line 352, column 4 to column 33)",
  " (in 'joint_continuous', line 353, column 10 to column 13)",
  " (in 'joint_continuous', line 353, column 4 to column 32)",
  " (in 'joint_continuous', line 354, column 10 to column 13)",
  " (in 'joint_continuous', line 354, column 4 to column 32)",
  " (in 'joint_continuous', line 355, column 10 to column 15)",
  " (in 'joint_continuous', line 355, column 4 to column 36)",
  " (in 'joint_continuous', line 356, column 10 to column 15)",
  " (in 'joint_continuous', line 356, column 4 to column 36)",
  " (in 'joint_continuous', line 357, column 4 to column 28)",
  " (in 'joint_continuous', line 358, column 4 to column 30)",
  " (in 'joint_continuous', line 359, column 4 to column 31)",
  " (in 'joint_continuous', line 360, column 4 to column 31)",
  " (in 'joint_continuous', line 361, column 4 to column 25)",
  " (in 'joint_continuous', line 362, column 10 to column 13)",
  " (in 'joint_continuous', line 362, column 4 to column 32)",
  " (in 'joint_continuous', line 363, column 4 to column 26)",
  " (in 'joint_continuous', line 364, column 11 to column 29)",
  " (in 'joint_continuous', line 364, column 30 to column 38)",
  " (in 'joint_continuous', line 364, column 4 to column 49)",
  " (in 'joint_continuous', line 365, column 4 to column 30)",
  " (in 'joint_continuous', line 369, column 10 to column 18)",
  " (in 'joint_continuous', line 370, column 27 to column 34)",
  " (in 'joint_continuous', line 371, column 11 to column 19)",
  " (in 'joint_continuous', line 372, column 20 to column 29)",
  " (in 'joint_continuous', line 373, column 23 to column 32)",
  " (in 'joint_continuous', line 376, column 29 to column 38)",
  " (in 'joint_continuous', line 377, column 29 to column 38)",
  " (in 'joint_continuous', line 378, column 21 to column 49)",
  " (in 'joint_continuous', line 379, column 18 to column 27)",
  " (in 'joint_continuous', line 380, column 8 to column 11)",
  " (in 'joint_continuous', line 411, column 9 to column 16)",
  " (in 'joint_continuous', line 412, column 9 to column 22)",
  " (in 'joint_continuous', line 414, column 9 to column 27)",
  " (in 'joint_continuous', line 414, column 28 to column 37)",
  " (in 'joint_continuous', line 415, column 9 to column 18)",
  " (in 'joint_continuous', line 19, column 11 to column 20)",
  " (in 'joint_continuous', line 19, column 4 to column 30)",
  " (in 'joint_continuous', line 22, column 6 to column 68)",
  " (in 'joint_continuous', line 21, column 19 to line 23, column 7)",
  " (in 'joint_continuous', line 21, column 4 to line 23, column 7)",
  " (in 'joint_continuous', line 28, column 9 to column 78)",
  " (in 'joint_continuous', line 27, column 24 to line 29, column 10)",
  " (in 'joint_continuous', line 27, column 7 to line 29, column 10)",
  " (in 'joint_continuous', line 25, column 4 to line 29, column 10)",
  " (in 'joint_continuous', line 31, column 4 to column 19)",
  " (in 'joint_continuous', line 17, column 14 to line 32, column 3)",
  " (in 'joint_continuous', line 42, column 11 to column 14)",
  " (in 'joint_continuous', line 42, column 4 to column 24)",
  " (in 'joint_continuous', line 51, column 8 to column 54)",
  " (in 'joint_continuous', line 50, column 23 to line 52, column 7)",
  " (in 'joint_continuous', line 50, column 6 to line 52, column 7)",
  " (in 'joint_continuous', line 49, column 11 to line 53, column 5)",
  " (in 'joint_continuous', line 47, column 8 to column 66)",
  " (in 'joint_continuous', line 46, column 23 to line 48, column 7)",
  " (in 'joint_continuous', line 46, column 6 to line 48, column 7)",
  " (in 'joint_continuous', line 45, column 21 to line 49, column 5)",
  " (in 'joint_continuous', line 45, column 4 to line 53, column 5)",
  " (in 'joint_continuous', line 54, column 4 to column 19)",
  " (in 'joint_continuous', line 40, column 10 to line 55, column 3)",
  " (in 'joint_continuous', line 65, column 11 to column 14)",
  " (in 'joint_continuous', line 65, column 4 to column 24)",
  " (in 'joint_continuous', line 69, column 6 to column 73)",
  " (in 'joint_continuous', line 68, column 21 to line 70, column 5)",
  " (in 'joint_continuous', line 68, column 4 to line 70, column 5)",
  " (in 'joint_continuous', line 72, column 4 to column 19)",
  " (in 'joint_continuous', line 63, column 10 to line 73, column 3)",
  " (in 'joint_continuous', line 98, column 11 to column 24)",
  " (in 'joint_continuous', line 98, column 4 to column 34)",
  " (in 'joint_continuous', line 101, column 16 to column 19)",
  " (in 'joint_continuous', line 101, column 4 to column 21)",
  " (in 'joint_continuous', line 102, column 4 to column 68)",
  " (in 'joint_continuous', line 105, column 4 to column 75)",
  " (in 'joint_continuous', line 108, column 4 to line 110, column 72)",
  " (in 'joint_continuous', line 112, column 4 to column 19)",
  " (in 'joint_continuous', line 96, column 14 to line 114, column 3)",
  " (in 'joint_continuous', line 138, column 11 to column 24)",
  " (in 'joint_continuous', line 138, column 4 to column 34)",
  " (in 'joint_continuous', line 141, column 16 to column 19)",
  " (in 'joint_continuous', line 141, column 4 to column 21)",
  " (in 'joint_continuous', line 142, column 4 to column 77)",
  " (in 'joint_continuous', line 145, column 4 to line 146, column 61)",
  " (in 'joint_continuous', line 149, column 4 to line 151, column 72)",
  " (in 'joint_continuous', line 153, column 4 to column 19)",
  " (in 'joint_continuous', line 136, column 14 to line 155, column 3)",
  " (in 'joint_continuous', line 166, column 16 to column 19)",
  " (in 'joint_continuous', line 166, column 4 to column 21)",
  " (in 'joint_continuous', line 169, column 6 to column 85)",
  " (in 'joint_continuous', line 168, column 21 to line 170, column 5)",
  " (in 'joint_continuous', line 168, column 4 to line 170, column 5)",
  " (in 'joint_continuous', line 172, column 4 to column 18)",
  " (in 'joint_continuous', line 164, column 10 to line 173, column 1)",
  " (in 'joint_continuous', line 184, column 16 to column 19)",
  " (in 'joint_continuous', line 184, column 4 to column 21)",
  " (in 'joint_continuous', line 187, column 6 to column 91)",
  " (in 'joint_continuous', line 186, column 21 to line 188, column 5)",
  " (in 'joint_continuous', line 186, column 4 to line 188, column 5)",
  " (in 'joint_continuous', line 190, column 4 to column 18)",
  " (in 'joint_continuous', line 182, column 10 to line 191, column 1)",
  " (in 'joint_continuous', line 205, column 11 to column 14)",
  " (in 'joint_continuous', line 205, column 4 to column 24)",
  " (in 'joint_continuous', line 208, column 16 to column 19)",
  " (in 'joint_continuous', line 208, column 4 to column 21)",
  " (in 'joint_continuous', line 209, column 4 to column 65)",
  " (in 'joint_continuous', line 212, column 4 to column 68)",
  " (in 'joint_continuous', line 214, column 4 to column 19)",
  " (in 'joint_continuous', line 203, column 14 to line 215, column 3)",
  " (in 'joint_continuous', line 228, column 11 to column 14)",
  " (in 'joint_continuous', line 228, column 4 to column 24)",
  " (in 'joint_continuous', line 231, column 16 to column 19)",
  " (in 'joint_continuous', line 231, column 4 to column 21)",
  " (in 'joint_continuous', line 232, column 4 to column 71)",
  " (in 'joint_continuous', line 235, column 4 to column 77)",
  " (in 'joint_continuous', line 237, column 4 to column 19)",
  " (in 'joint_continuous', line 226, column 15 to line 238, column 3)",
  " (in 'joint_continuous', line 258, column 11 to column 29)",
  " (in 'joint_continuous', line 258, column 30 to column 39)",
  " (in 'joint_continuous', line 258, column 4 to column 44)",
  " (in 'joint_continuous', line 260, column 4 to column 30)",
  " (in 'joint_continuous', line 262, column 6 to column 51)",
  " (in 'joint_continuous', line 261, column 4 to line 262, column 51)",
  " (in 'joint_continuous', line 266, column 20 to column 28)",
  " (in 'joint_continuous', line 266, column 7 to column 30)",
  " (in 'joint_continuous', line 267, column 7 to column 35)",
  " (in 'joint_continuous', line 268, column 7 to column 108)",
  " (in 'joint_continuous', line 265, column 26 to line 269, column 6)",
  " (in 'joint_continuous', line 265, column 5 to line 269, column 6)",
  " (in 'joint_continuous', line 264, column 4 to line 269, column 6)",
  " (in 'joint_continuous', line 272, column 9 to column 66)",
  " (in 'joint_continuous', line 271, column 28 to line 273, column 8)",
  " (in 'joint_continuous', line 271, column 7 to line 273, column 8)",
  " (in 'joint_continuous', line 270, column 5 to line 273, column 8)",
  " (in 'joint_continuous', line 275, column 4 to column 14)",
  " (in 'joint_continuous', line 256, column 15 to line 276, column 3)",
  " (in 'joint_continuous', line 287, column 11 to column 15)",
  " (in 'joint_continuous', line 287, column 16 to column 25)",
  " (in 'joint_continuous', line 287, column 4 to column 30)",
  " (in 'joint_continuous', line 289, column 4 to column 19)",
  " (in 'joint_continuous', line 292, column 6 to column 40)",
  " (in 'joint_continuous', line 291, column 17 to line 293, column 5)",
  " (in 'joint_continuous', line 291, column 4 to line 293, column 5)",
  " (in 'joint_continuous', line 295, column 4 to column 14)",
  " (in 'joint_continuous', line 285, column 11 to line 296, column 3)",
  " (in 'joint_continuous', line 307, column 11 to column 15)",
  " (in 'joint_continuous', line 307, column 16 to column 25)",
  " (in 'joint_continuous', line 307, column 4 to column 30)",
  " (in 'joint_continuous', line 310, column 6 to column 33)",
  " (in 'joint_continuous', line 309, column 20 to line 311, column 5)",
  " (in 'joint_continuous', line 309, column 4 to line 311, column 5)",
  " (in 'joint_continuous', line 315, column 8 to column 42)",
  " (in 'joint_continuous', line 314, column 25 to line 316, column 7)",
  " (in 'joint_continuous', line 314, column 6 to line 316, column 7)",
  " (in 'joint_continuous', line 313, column 4 to line 316, column 7)",
  " (in 'joint_continuous', line 318, column 4 to column 14)",
  " (in 'joint_continuous', line 305, column 11 to line 319, column 3)",
  " (in 'joint_continuous', line 332, column 11 to column 20)",
  " (in 'joint_continuous', line 332, column 4 to column 31)",
  " (in 'joint_continuous', line 334, column 4 to column 72)",
  " (in 'joint_continuous', line 336, column 4 to column 20)",
  " (in 'joint_continuous', line 330, column 15 to line 337, column 3)"};
template <typename T5__, typename T9__,
          stan::require_all_t<stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T9__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T5__>, T9__>,-1,1>
calc_loglik_dna(const int& n_S, const int& S_dna, const int& Nloc_dna,
                const std::vector<int>& n_K, const std::vector<int>& n_N,
                const T5__& p_trad_arg__, const std::vector<int>& L_ind,
                const std::vector<int>& K_dna, const std::vector<int>& N_dna,
                const std::vector<T9__>& p_dna, const std::vector<int>&
                L_dna, std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T2__>,-1,1>
calc_loglik_trad_count(const std::vector<T0__>& lambda, const int& negbin,
                       const std::vector<T2__>& phi, const std::vector<int>&
                       n_E, const int& n_C, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
calc_loglik_trad_continuous(const std::vector<T0__>& lambda, const T1__&
                            beta_gamma_arg__, const std::vector<T2__>&
                            E_trans, const std::vector<int>& R_ind,
                            const int& n_C, std::ostream* pstream__);
template <typename T1__, typename T3__, typename T6__, typename T10__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T18__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>, T6__,
                stan::base_type_t<T10__>, T18__>,-1,1>
calc_loglik_count(const int& ctch, const std::vector<T1__>& coef,
                  const std::vector<int>& mat, const T3__& mu_trad_arg__,
                  const std::vector<int>& R_ind, const int& negbin,
                  const std::vector<T6__>& phi, const std::vector<int>& n_E,
                  const std::vector<int>& n_K, const std::vector<int>& n_N,
                  const T10__& p_trad_arg__, const std::vector<int>& L_ind,
                  const int& n_C, const int& n_S, const int& S_dna,
                  const int& Nloc_dna, const std::vector<int>& K_dna,
                  const std::vector<int>& N_dna, const std::vector<T18__>&
                  p_dna, const std::vector<int>& L_dna, std::ostream*
                  pstream__);
template <typename T1__, typename T3__, typename T4__, typename T6__,
          typename T9__, typename T17__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_stan_scalar<T17__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, T6__, stan::base_type_t<T9__>,
                stan::promote_args_t<T17__>>,-1,1>
calc_loglik_continuous(const int& ctch, const std::vector<T1__>& coef,
                       const std::vector<int>& mat, const T3__&
                       alpha_gamma_arg__, const T4__& beta_gamma_arg__,
                       const std::vector<int>& R_ind,
                       const std::vector<T6__>& E_trans,
                       const std::vector<int>& n_K, const std::vector<int>&
                       n_N, const T9__& p_trad_arg__, const std::vector<int>&
                       L_ind, const int& n_C, const int& n_S, const int&
                       S_dna, const int& Nloc_dna, const std::vector<int>&
                       K_dna, const std::vector<int>& N_dna,
                       const std::vector<T17__>& p_dna,
                       const std::vector<int>& L_dna, std::ostream* pstream__);
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_count(const int& ctch, const std::vector<T1__>& coef,
                 const std::vector<int>& mat, const T3__& mu_trad_arg__,
                 const std::vector<int>& R_ind, const int& n_C, std::ostream*
                 pstream__);
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_continuous(const int& ctch, const std::vector<T1__>& coef,
                      const std::vector<int>& mat, const T3__&
                      alpha_gamma_arg__, const std::vector<int>& R_ind,
                      const int& n_C, std::ostream* pstream__);
template <typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, T5__, stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_count(const int& negbin, const std::vector<T1__>& phi,
                          const std::vector<int>& n_E, const int& n_C,
                          const int& ctch, const std::vector<T5__>& coef,
                          const std::vector<int>& mat, const T7__&
                          mu_1_arg__, const std::vector<int>& R_ind,
                          std::ostream* pstream__);
template <typename T0__, typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T5__,
                stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_continuous(const T0__& beta_arg__,
                               const std::vector<T1__>& E_trans,
                               const std::vector<int>& R_ind, const int& n_C,
                               const int& ctch, const std::vector<T5__>&
                               coef, const std::vector<int>& mat, const T7__&
                               alpha_arg__, std::ostream* pstream__);
template <typename T2__, typename T5__, typename T8__, typename T9__,
          typename T10__, typename T11__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_eigen_matrix_dynamic<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T5__>, T8__, T9__,
                stan::base_type_t<T10__>,
                stan::promote_args_t<stan::base_type_t<T11__>>>,-1,-1>
calc_mu(const std::vector<int>& trad_ind, const std::vector<int>& dna_ind,
        const T2__& mu_trad_arg__, const int& ctch, const int& nparams,
        const T5__& q_arg__, const int& Nloc_dna, const int& Nloc_trad,
        const std::vector<T8__>& p_dna, const T9__& p10, const T10__&
        mat_site_arg__, const T11__& alpha_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
calc_mu_trad_count(const int& Nloc, const int& nparams, const T2__&
                   mu_1_arg__, const T3__& q_arg__, const int& ctch,
                   std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,-1>
calc_mu_trad_continuous(const int& Nloc, const int& nparams, const T2__&
                        alpha_arg__, const T3__& beta_arg__, const T4__&
                        q_arg__, const int& ctch, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T4__>>,-1,1>
calc_p11(const int& Nloc_trad, const T1__& mu_trad_arg__, const T2__&
         mat_site_arg__, const std::vector<int>& trad_ind, const T4__&
         alpha_arg__, std::ostream* pstream__);
template <typename T5__, typename T9__,
          stan::require_all_t<stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T9__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T5__>, T9__>,-1,1>
calc_loglik_dna(const int& n_S, const int& S_dna, const int& Nloc_dna,
                const std::vector<int>& n_K, const std::vector<int>& n_N,
                const T5__& p_trad_arg__, const std::vector<int>& L_ind,
                const std::vector<int>& K_dna, const std::vector<int>& N_dna,
                const std::vector<T9__>& p_dna, const std::vector<int>&
                L_dna, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T5__>,
                             T9__>;
  int current_statement__ = 0;
  const auto& p_trad = stan::math::to_ref(p_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 100;
    stan::math::validate_non_negative_index("log_lik", "n_S + S_dna", (n_S +
      S_dna));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n_S + S_dna),
        DUMMY_VAR__);
    current_statement__ = 104;
    for (int i = 1; i <= n_S; ++i) {
      current_statement__ = 102;
      stan::model::assign(log_lik,
        stan::math::binomial_lpmf<false>(
          stan::model::rvalue(n_K, "n_K", stan::model::index_uni(i)),
          stan::model::rvalue(n_N, "n_N", stan::model::index_uni(i)),
          stan::model::rvalue(p_trad, "p_trad",
            stan::model::index_uni(
              stan::model::rvalue(L_ind, "L_ind", stan::model::index_uni(i))))),
        "assigning variable log_lik", stan::model::index_uni(i));
    }
    current_statement__ = 108;
    if (stan::math::logical_gt(Nloc_dna, 0)) {
      current_statement__ = 107;
      for (int i = 1; i <= S_dna; ++i) {
        current_statement__ = 105;
        stan::model::assign(log_lik,
          stan::math::binomial_lpmf<false>(
            stan::model::rvalue(K_dna, "K_dna", stan::model::index_uni(i)),
            stan::model::rvalue(N_dna, "N_dna", stan::model::index_uni(i)),
            stan::model::rvalue(p_dna, "p_dna",
              stan::model::index_uni(
                stan::model::rvalue(L_dna, "L_dna", stan::model::index_uni(i))))),
          "assigning variable log_lik", stan::model::index_uni((n_S + i)));
      }
    }
    current_statement__ = 109;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T2__>,-1,1>
calc_loglik_trad_count(const std::vector<T0__>& lambda, const int& negbin,
                       const std::vector<T2__>& phi, const std::vector<int>&
                       n_E, const int& n_C, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 111;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 121;
    if (stan::math::logical_eq(negbin, 1)) {
      current_statement__ = 119;
      for (int j = 1; j <= n_C; ++j) {
        current_statement__ = 117;
        stan::model::assign(log_lik,
          stan::math::neg_binomial_2_lpmf<false>(
            stan::model::rvalue(n_E, "n_E", stan::model::index_uni(j)),
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(j)),
            phi), "assigning variable log_lik", stan::model::index_uni(j));
      }
    } else {
      current_statement__ = 115;
      for (int j = 1; j <= n_C; ++j) {
        current_statement__ = 113;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(n_E, "n_E", stan::model::index_uni(j)),
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(j))),
          "assigning variable log_lik", stan::model::index_uni(j));
      }
    }
    current_statement__ = 122;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
calc_loglik_trad_continuous(const std::vector<T0__>& lambda, const T1__&
                            beta_gamma_arg__, const std::vector<T2__>&
                            E_trans, const std::vector<int>& R_ind,
                            const int& n_C, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__>;
  int current_statement__ = 0;
  const auto& beta_gamma = stan::math::to_ref(beta_gamma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 124;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 128;
    for (int j = 1; j <= n_C; ++j) {
      current_statement__ = 126;
      stan::model::assign(log_lik,
        stan::math::gamma_lpdf<false>(
          stan::model::rvalue(E_trans, "E_trans", stan::model::index_uni(j)),
          lambda,
          stan::model::rvalue(beta_gamma, "beta_gamma",
            stan::model::index_uni(
              stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))),
        "assigning variable log_lik", stan::model::index_uni(j));
    }
    current_statement__ = 129;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__, typename T6__, typename T10__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T18__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>, T6__,
                stan::base_type_t<T10__>, T18__>,-1,1>
calc_loglik_count(const int& ctch, const std::vector<T1__>& coef,
                  const std::vector<int>& mat, const T3__& mu_trad_arg__,
                  const std::vector<int>& R_ind, const int& negbin,
                  const std::vector<T6__>& phi, const std::vector<int>& n_E,
                  const std::vector<int>& n_K, const std::vector<int>& n_N,
                  const T10__& p_trad_arg__, const std::vector<int>& L_ind,
                  const int& n_C, const int& n_S, const int& S_dna,
                  const int& Nloc_dna, const std::vector<int>& K_dna,
                  const std::vector<int>& N_dna, const std::vector<T18__>&
                  p_dna, const std::vector<int>& L_dna, std::ostream*
                  pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>, T6__,
                             stan::base_type_t<T10__>, T18__>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  const auto& p_trad = stan::math::to_ref(p_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 131;
    stan::math::validate_non_negative_index("log_lik", "n_C + n_S + S_dna",
      ((n_C + n_S) + S_dna));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((n_C + n_S) + S_dna),
        DUMMY_VAR__);
    current_statement__ = 133;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 135;
    stan::model::assign(lambda,
      get_lambda_count(ctch, coef, mat, mu_trad, R_ind, n_C, pstream__),
      "assigning variable lambda");
    current_statement__ = 136;
    stan::model::assign(log_lik,
      calc_loglik_trad_count(lambda, negbin, phi, n_E, n_C, pstream__),
      "assigning variable log_lik", stan::model::index_min_max(1, n_C));
    current_statement__ = 137;
    stan::model::assign(log_lik,
      calc_loglik_dna(n_S, S_dna, Nloc_dna, n_K, n_N, p_trad, L_ind, K_dna,
        N_dna, p_dna, L_dna, pstream__), "assigning variable log_lik",
      stan::model::index_min_max((n_C + 1), ((n_C + n_S) + S_dna)));
    current_statement__ = 138;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__, typename T4__, typename T6__,
          typename T9__, typename T17__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_stan_scalar<T17__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, T6__, stan::base_type_t<T9__>,
                stan::promote_args_t<T17__>>,-1,1>
calc_loglik_continuous(const int& ctch, const std::vector<T1__>& coef,
                       const std::vector<int>& mat, const T3__&
                       alpha_gamma_arg__, const T4__& beta_gamma_arg__,
                       const std::vector<int>& R_ind,
                       const std::vector<T6__>& E_trans,
                       const std::vector<int>& n_K, const std::vector<int>&
                       n_N, const T9__& p_trad_arg__, const std::vector<int>&
                       L_ind, const int& n_C, const int& n_S, const int&
                       S_dna, const int& Nloc_dna, const std::vector<int>&
                       K_dna, const std::vector<int>& N_dna,
                       const std::vector<T17__>& p_dna,
                       const std::vector<int>& L_dna, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>, T6__,
                             stan::base_type_t<T9__>,
                             stan::promote_args_t<T17__>>;
  int current_statement__ = 0;
  const auto& alpha_gamma = stan::math::to_ref(alpha_gamma_arg__);
  const auto& beta_gamma = stan::math::to_ref(beta_gamma_arg__);
  const auto& p_trad = stan::math::to_ref(p_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 140;
    stan::math::validate_non_negative_index("log_lik", "n_C + n_S + S_dna",
      ((n_C + n_S) + S_dna));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((n_C + n_S) + S_dna),
        DUMMY_VAR__);
    current_statement__ = 142;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 144;
    stan::model::assign(lambda,
      get_lambda_continuous(ctch, coef, mat, alpha_gamma, R_ind, n_C,
        pstream__), "assigning variable lambda");
    current_statement__ = 145;
    stan::model::assign(log_lik,
      calc_loglik_trad_continuous(lambda, beta_gamma, E_trans, R_ind, n_C,
        pstream__), "assigning variable log_lik",
      stan::model::index_min_max(1, n_C));
    current_statement__ = 146;
    stan::model::assign(log_lik,
      calc_loglik_dna(n_S, S_dna, Nloc_dna, n_K, n_N, p_trad, L_ind, K_dna,
        N_dna, p_dna, L_dna, pstream__), "assigning variable log_lik",
      stan::model::index_min_max((n_C + 1), ((n_C + n_S) + S_dna)));
    current_statement__ = 147;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_count(const int& ctch, const std::vector<T1__>& coef,
                 const std::vector<int>& mat, const T3__& mu_trad_arg__,
                 const std::vector<int>& R_ind, const int& n_C, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 149;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 153;
    for (int j = 1; j <= n_C; ++j) {
      current_statement__ = 151;
      stan::model::assign(lambda,
        (stan::math::logical_eq(ctch, 1) ? (stan::model::rvalue(coef, "coef",
                                              stan::model::index_uni(
                                                stan::model::rvalue(mat,
                                                  "mat",
                                                  stan::model::index_uni(j))))
        *
        stan::model::rvalue(mu_trad, "mu_trad",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))) : 
        stan::model::rvalue(mu_trad, "mu_trad",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))),
        "assigning variable lambda", stan::model::index_uni(j));
    }
    current_statement__ = 154;
    return lambda;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_continuous(const int& ctch, const std::vector<T1__>& coef,
                      const std::vector<int>& mat, const T3__&
                      alpha_gamma_arg__, const std::vector<int>& R_ind,
                      const int& n_C, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& alpha_gamma = stan::math::to_ref(alpha_gamma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 156;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 160;
    for (int j = 1; j <= n_C; ++j) {
      current_statement__ = 158;
      stan::model::assign(lambda,
        (stan::math::logical_eq(ctch, 1) ? (stan::model::rvalue(coef, "coef",
                                              stan::model::index_uni(
                                                stan::model::rvalue(mat,
                                                  "mat",
                                                  stan::model::index_uni(j))))
        *
        stan::model::rvalue(alpha_gamma, "alpha_gamma",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))) : 
        stan::model::rvalue(alpha_gamma, "alpha_gamma",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))),
        "assigning variable lambda", stan::model::index_uni(j));
    }
    current_statement__ = 161;
    return lambda;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, T5__, stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_count(const int& negbin, const std::vector<T1__>& phi,
                          const std::vector<int>& n_E, const int& n_C,
                          const int& ctch, const std::vector<T5__>& coef,
                          const std::vector<int>& mat, const T7__&
                          mu_1_arg__, const std::vector<int>& R_ind,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T5__,
                             stan::base_type_t<T7__>>;
  int current_statement__ = 0;
  const auto& mu_1 = stan::math::to_ref(mu_1_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 163;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 165;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 167;
    stan::model::assign(lambda,
      get_lambda_count(ctch, coef, mat, mu_1, R_ind, n_C, pstream__),
      "assigning variable lambda");
    current_statement__ = 168;
    stan::model::assign(log_lik,
      calc_loglik_trad_count(lambda, negbin, phi, n_E, n_C, pstream__),
      "assigning variable log_lik");
    current_statement__ = 169;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T5__,
                stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_continuous(const T0__& beta_arg__,
                               const std::vector<T1__>& E_trans,
                               const std::vector<int>& R_ind, const int& n_C,
                               const int& ctch, const std::vector<T5__>&
                               coef, const std::vector<int>& mat, const T7__&
                               alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T5__, stan::base_type_t<T7__>>;
  int current_statement__ = 0;
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 171;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 173;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 175;
    stan::model::assign(lambda,
      get_lambda_continuous(ctch, coef, mat, alpha, R_ind, n_C, pstream__),
      "assigning variable lambda");
    current_statement__ = 176;
    stan::model::assign(log_lik,
      calc_loglik_trad_continuous(lambda, beta, E_trans, R_ind, n_C,
        pstream__), "assigning variable log_lik");
    current_statement__ = 177;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T5__, typename T8__, typename T9__,
          typename T10__, typename T11__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_eigen_matrix_dynamic<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T5__>, T8__, T9__,
                stan::base_type_t<T10__>,
                stan::promote_args_t<stan::base_type_t<T11__>>>,-1,-1>
calc_mu(const std::vector<int>& trad_ind, const std::vector<int>& dna_ind,
        const T2__& mu_trad_arg__, const int& ctch, const int& nparams,
        const T5__& q_arg__, const int& Nloc_dna, const int& Nloc_trad,
        const std::vector<T8__>& p_dna, const T9__& p10, const T10__&
        mat_site_arg__, const T11__& alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T5__>, T8__, T9__,
                             stan::base_type_t<T10__>,
                             stan::promote_args_t<stan::base_type_t<T11__>>>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  const auto& q = stan::math::to_ref(q_arg__);
  const auto& mat_site = stan::math::to_ref(mat_site_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 179;
    stan::math::validate_non_negative_index("mu", "Nloc_dna + Nloc_trad",
      (Nloc_dna + Nloc_trad));
    current_statement__ = 180;
    stan::math::validate_non_negative_index("mu", "nparams + 1", (nparams +
      1));
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((Nloc_dna + Nloc_trad),
        (nparams + 1), DUMMY_VAR__);
    current_statement__ = 182;
    stan::model::assign(mu, mu_trad, "assigning variable mu",
      stan::model::index_multi(trad_ind), stan::model::index_uni(1));
    current_statement__ = 184;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 183;
      stan::model::assign(mu,
        stan::math::multiply(mu_trad, stan::math::transpose(q)),
        "assigning variable mu", stan::model::index_multi(trad_ind),
        stan::model::index_min_max(2, (nparams + 1)));
    }
    current_statement__ = 191;
    if (stan::math::logical_gt(Nloc_dna, 0)) {
      current_statement__ = 190;
      for (int i = 1; i <= Nloc_dna; ++i) {
        current_statement__ = 185;
        stan::math::validate_non_negative_index("p11_dna", "Nloc_dna",
          Nloc_dna);
        std::vector<local_scalar_t__> p11_dna =
          std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
        current_statement__ = 187;
        stan::model::assign(p11_dna,
          (stan::model::rvalue(p_dna, "p_dna", stan::model::index_uni(i)) -
          p10), "assigning variable p11_dna", stan::model::index_uni(i));
        current_statement__ = 188;
        stan::model::assign(mu,
          ((stan::model::rvalue(p11_dna, "p11_dna", stan::model::index_uni(i))
          *
          stan::math::exp(
            stan::math::dot_product(
              stan::math::to_vector(
                stan::model::rvalue(mat_site, "mat_site",
                  stan::model::index_uni(
                    stan::model::rvalue(dna_ind, "dna_ind",
                      stan::model::index_uni(i))))), alpha))) / (1 -
          stan::model::rvalue(p11_dna, "p11_dna", stan::model::index_uni(i)))),
          "assigning variable mu",
          stan::model::index_uni(
            stan::model::rvalue(dna_ind, "dna_ind", stan::model::index_uni(i))),
          stan::model::index_uni(1));
      }
    }
    current_statement__ = 195;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 194;
      for (int i = 1; i <= Nloc_dna; ++i) {
        current_statement__ = 192;
        stan::model::assign(mu,
          stan::math::multiply(
            stan::model::rvalue(mu, "mu",
              stan::model::index_uni(
                stan::model::rvalue(dna_ind, "dna_ind",
                  stan::model::index_uni(i))), stan::model::index_uni(1)),
            stan::math::transpose(q)), "assigning variable mu",
          stan::model::index_uni(
            stan::model::rvalue(dna_ind, "dna_ind", stan::model::index_uni(i))),
          stan::model::index_min_max(2, (nparams + 1)));
      }
    }
    current_statement__ = 196;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
calc_mu_trad_count(const int& Nloc, const int& nparams, const T2__&
                   mu_1_arg__, const T3__& q_arg__, const int& ctch,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& mu_1 = stan::math::to_ref(mu_1_arg__);
  const auto& q = stan::math::to_ref(q_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 198;
    stan::math::validate_non_negative_index("mu", "Nloc", Nloc);
    current_statement__ = 199;
    stan::math::validate_non_negative_index("mu", "nparams + 1", (nparams +
      1));
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Nloc, (nparams + 1),
        DUMMY_VAR__);
    current_statement__ = 201;
    stan::model::assign(mu, mu_1, "assigning variable mu",
      stan::model::index_omni(), stan::model::index_uni(1));
    current_statement__ = 204;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 202;
      stan::model::assign(mu,
        stan::math::multiply(mu_1, stan::math::transpose(q)),
        "assigning variable mu", stan::model::index_omni(),
        stan::model::index_min_max(2, (nparams + 1)));
    }
    current_statement__ = 205;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,-1>
calc_mu_trad_continuous(const int& Nloc, const int& nparams, const T2__&
                        alpha_arg__, const T3__& beta_arg__, const T4__&
                        q_arg__, const int& ctch, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& q = stan::math::to_ref(q_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 207;
    stan::math::validate_non_negative_index("mu", "Nloc", Nloc);
    current_statement__ = 208;
    stan::math::validate_non_negative_index("mu", "nparams + 1", (nparams +
      1));
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Nloc, (nparams + 1),
        DUMMY_VAR__);
    current_statement__ = 212;
    for (int j = 1; j <= Nloc; ++j) {
      current_statement__ = 210;
      stan::model::assign(mu,
        (stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j)) /
        stan::model::rvalue(beta, "beta", stan::model::index_uni(j))),
        "assigning variable mu", stan::model::index_uni(j),
        stan::model::index_uni(1));
    }
    current_statement__ = 216;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 215;
      for (int i = 1; i <= nparams; ++i) {
        current_statement__ = 213;
        stan::model::assign(mu,
          stan::math::multiply(
            stan::math::to_vector(
              stan::model::deep_copy(
                stan::model::rvalue(mu, "mu", stan::model::index_omni(),
                  stan::model::index_uni(1)))),
            stan::model::rvalue(q, "q", stan::model::index_uni(i))),
          "assigning variable mu", stan::model::index_omni(),
          stan::model::index_uni((i + 1)));
      }
    }
    current_statement__ = 217;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T4__>>,-1,1>
calc_p11(const int& Nloc_trad, const T1__& mu_trad_arg__, const T2__&
         mat_site_arg__, const std::vector<int>& trad_ind, const T4__&
         alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  const auto& mat_site = stan::math::to_ref(mat_site_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 219;
    stan::math::validate_non_negative_index("p11_trad", "Nloc_trad",
      Nloc_trad);
    Eigen::Matrix<local_scalar_t__,-1,1> p11_trad =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad, DUMMY_VAR__);
    current_statement__ = 221;
    stan::model::assign(p11_trad,
      stan::math::elt_divide(mu_trad,
        stan::math::add(mu_trad,
          stan::math::exp(
            stan::math::multiply(
              stan::model::rvalue(mat_site, "mat_site",
                stan::model::index_multi(trad_ind), stan::model::index_omni()),
              alpha)))), "assigning variable p11_trad");
    current_statement__ = 222;
    return p11_trad;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_joint_continuous final : public model_base_crtp<model_joint_continuous> {
private:
  int n_S;
  int S_dna;
  int n_C;
  std::vector<int> L_ind;
  std::vector<int> L_dna;
  std::vector<int> R_ind;
  int Nloc_dna;
  int Nloc_trad;
  std::vector<int> trad_ind;
  std::vector<int> dna_ind;
  std::vector<double> n_E;
  std::vector<int> n_N;
  std::vector<int> n_K;
  std::vector<int> N_dna;
  std::vector<int> K_dna;
  std::vector<double> p10priors;
  std::vector<double> alphapriors;
  std::vector<double> bgammapriors;
  std::vector<double> agammapriors;
  int nparams;
  std::vector<int> mat;
  int nsitecov;
  Eigen::Matrix<double,-1,-1> mat_site_data__;
  int ctch;
  int coef_1dim__;
  int log_lik_1dim__;
  int mu_1dim__;
  int mu_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mat_site{nullptr, 0, 0};
public:
  ~model_joint_continuous() {}
  model_joint_continuous(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_joint_continuous_namespace::model_joint_continuous";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization", "n_S", "int",
        std::vector<size_t>{});
      n_S = std::numeric_limits<int>::min();
      current_statement__ = 48;
      n_S = context__.vals_i("n_S")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "n_S", n_S, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "S_dna", "int",
        std::vector<size_t>{});
      S_dna = std::numeric_limits<int>::min();
      current_statement__ = 49;
      S_dna = context__.vals_i("S_dna")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "S_dna", S_dna, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "n_C", "int",
        std::vector<size_t>{});
      n_C = std::numeric_limits<int>::min();
      current_statement__ = 50;
      n_C = context__.vals_i("n_C")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "n_C", n_C, 1);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("L_ind", "n_S", n_S);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "L_ind", "int",
        std::vector<size_t>{static_cast<size_t>(n_S)});
      L_ind = std::vector<int>(n_S, std::numeric_limits<int>::min());
      current_statement__ = 52;
      L_ind = context__.vals_i("L_ind");
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "L_ind", L_ind, 1);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("L_dna", "S_dna", S_dna);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "L_dna", "int",
        std::vector<size_t>{static_cast<size_t>(S_dna)});
      L_dna = std::vector<int>(S_dna, std::numeric_limits<int>::min());
      current_statement__ = 54;
      L_dna = context__.vals_i("L_dna");
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "L_dna", L_dna, 1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("R_ind", "n_C", n_C);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "R_ind", "int",
        std::vector<size_t>{static_cast<size_t>(n_C)});
      R_ind = std::vector<int>(n_C, std::numeric_limits<int>::min());
      current_statement__ = 56;
      R_ind = context__.vals_i("R_ind");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "R_ind", R_ind, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "Nloc_dna", "int",
        std::vector<size_t>{});
      Nloc_dna = std::numeric_limits<int>::min();
      current_statement__ = 57;
      Nloc_dna = context__.vals_i("Nloc_dna")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "Nloc_dna", Nloc_dna, 0);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "Nloc_trad", "int",
        std::vector<size_t>{});
      Nloc_trad = std::numeric_limits<int>::min();
      current_statement__ = 58;
      Nloc_trad = context__.vals_i("Nloc_trad")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "Nloc_trad", Nloc_trad,
        1);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("trad_ind", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 60;
      context__.validate_dims("data initialization", "trad_ind", "int",
        std::vector<size_t>{static_cast<size_t>(Nloc_trad)});
      trad_ind = std::vector<int>(Nloc_trad, std::numeric_limits<int>::min());
      current_statement__ = 60;
      trad_ind = context__.vals_i("trad_ind");
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "trad_ind", trad_ind, 0);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("dna_ind", "Nloc_dna", Nloc_dna);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "dna_ind", "int",
        std::vector<size_t>{static_cast<size_t>(Nloc_dna)});
      dna_ind = std::vector<int>(Nloc_dna, std::numeric_limits<int>::min());
      current_statement__ = 62;
      dna_ind = context__.vals_i("dna_ind");
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "dna_ind", dna_ind, 0);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("n_E", "n_C", n_C);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "n_E", "double",
        std::vector<size_t>{static_cast<size_t>(n_C)});
      n_E = std::vector<double>(n_C,
              std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 64;
      n_E = context__.vals_r("n_E");
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "n_E", n_E, 0);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("n_N", "n_S", n_S);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "n_N", "int",
        std::vector<size_t>{static_cast<size_t>(n_S)});
      n_N = std::vector<int>(n_S, std::numeric_limits<int>::min());
      current_statement__ = 66;
      n_N = context__.vals_i("n_N");
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "n_N", n_N, 1);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("n_K", "n_S", n_S);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "n_K", "int",
        std::vector<size_t>{static_cast<size_t>(n_S)});
      n_K = std::vector<int>(n_S, std::numeric_limits<int>::min());
      current_statement__ = 68;
      n_K = context__.vals_i("n_K");
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "n_K", n_K, 0);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("N_dna", "S_dna", S_dna);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "N_dna", "int",
        std::vector<size_t>{static_cast<size_t>(S_dna)});
      N_dna = std::vector<int>(S_dna, std::numeric_limits<int>::min());
      current_statement__ = 70;
      N_dna = context__.vals_i("N_dna");
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "N_dna", N_dna, 1);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("K_dna", "S_dna", S_dna);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "K_dna", "int",
        std::vector<size_t>{static_cast<size_t>(S_dna)});
      K_dna = std::vector<int>(S_dna, std::numeric_limits<int>::min());
      current_statement__ = 72;
      K_dna = context__.vals_i("K_dna");
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "K_dna", K_dna, 0);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "p10priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      p10priors = std::vector<double>(2,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 73;
      p10priors = context__.vals_r("p10priors");
      current_statement__ = 74;
      context__.validate_dims("data initialization", "alphapriors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      alphapriors = std::vector<double>(2,
                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 74;
      alphapriors = context__.vals_r("alphapriors");
      current_statement__ = 75;
      context__.validate_dims("data initialization", "bgammapriors",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      bgammapriors = std::vector<double>(2,
                       std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 75;
      bgammapriors = context__.vals_r("bgammapriors");
      current_statement__ = 76;
      context__.validate_dims("data initialization", "agammapriors",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      agammapriors = std::vector<double>(2,
                       std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 76;
      agammapriors = context__.vals_r("agammapriors");
      current_statement__ = 77;
      context__.validate_dims("data initialization", "nparams", "int",
        std::vector<size_t>{});
      nparams = std::numeric_limits<int>::min();
      current_statement__ = 77;
      nparams = context__.vals_i("nparams")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "nparams", nparams, 0);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("mat", "n_C", n_C);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "mat", "int",
        std::vector<size_t>{static_cast<size_t>(n_C)});
      mat = std::vector<int>(n_C, std::numeric_limits<int>::min());
      current_statement__ = 79;
      mat = context__.vals_i("mat");
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "mat", mat, 1);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "nsitecov", "int",
        std::vector<size_t>{});
      nsitecov = std::numeric_limits<int>::min();
      current_statement__ = 80;
      nsitecov = context__.vals_i("nsitecov")[(1 - 1)];
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "nsitecov", nsitecov, 0);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("mat_site",
        "Nloc_trad + Nloc_dna", (Nloc_trad + Nloc_dna));
      current_statement__ = 82;
      stan::math::validate_non_negative_index("mat_site", "nsitecov",
        nsitecov);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "mat_site", "double",
        std::vector<size_t>{static_cast<size_t>((Nloc_trad + Nloc_dna)),
          static_cast<size_t>(nsitecov)});
      mat_site_data__ = Eigen::Matrix<double,-1,-1>::Constant((Nloc_trad +
                          Nloc_dna), nsitecov,
                          std::numeric_limits<double>::quiet_NaN());
      new (&mat_site)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mat_site_data__.data(),
        (Nloc_trad + Nloc_dna), nsitecov);
      {
        std::vector<local_scalar_t__> mat_site_flat__;
        current_statement__ = 83;
        mat_site_flat__ = context__.vals_r("mat_site");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
          current_statement__ = 83;
          for (int sym2__ = 1; sym2__ <= (Nloc_trad + Nloc_dna); ++sym2__) {
            current_statement__ = 83;
            stan::model::assign(mat_site, mat_site_flat__[(pos__ - 1)],
              "assigning variable mat_site", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 83;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 84;
      context__.validate_dims("data initialization", "ctch", "int",
        std::vector<size_t>{});
      ctch = std::numeric_limits<int>::min();
      current_statement__ = 84;
      ctch = context__.vals_i("ctch")[(1 - 1)];
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "ctch", ctch, 0);
      current_statement__ = 84;
      stan::math::check_less_or_equal(function__, "ctch", ctch, 1);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("p_dna", "Nloc_dna", Nloc_dna);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("q_trans", "nparams", nparams);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("alpha", "nsitecov", nsitecov);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("alpha_gamma", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("beta_gamma", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("p11_trad", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("p_trad", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 92;
      coef_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 92;
      coef_1dim__ = (stan::math::logical_eq(ctch, 1) ? (nparams + 1) : 0);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("coef",
        "(ctch == 1) ? nparams + 1 : 0", coef_1dim__);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("mu_trad", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("E_trans", "n_C", n_C);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("q", "nparams", nparams);
      current_statement__ = 96;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 96;
      log_lik_1dim__ = ((n_C + n_S) + S_dna);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("log_lik", "n_C + n_S + S_dna",
        log_lik_1dim__);
      current_statement__ = 97;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 97;
      mu_1dim__ = (Nloc_dna + Nloc_trad);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("mu", "Nloc_dna + Nloc_trad",
        mu_1dim__);
      current_statement__ = 98;
      mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 98;
      mu_2dim__ = (nparams + 1);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("mu", "nparams + 1", mu_2dim__);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("beta", "Nloc_trad", Nloc_trad);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + Nloc_dna + nparams + nsitecov + Nloc_trad +
      Nloc_trad;
  }
  inline std::string model_name() const final {
    return "model_joint_continuous";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_joint_continuous_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ log_p10 = DUMMY_VAR__;
      current_statement__ = 1;
      log_p10 = in__.template read_constrain_ub<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<local_scalar_t__> p_dna =
        std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
      current_statement__ = 2;
      p_dna = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, Nloc_dna);
      Eigen::Matrix<local_scalar_t__,-1,1> q_trans =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nparams, DUMMY_VAR__);
      current_statement__ = 3;
      q_trans = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-0.99999,
                  lp__, nparams);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsitecov, DUMMY_VAR__);
      current_statement__ = 4;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nsitecov);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      current_statement__ = 5;
      alpha_gamma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, Nloc_trad);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      current_statement__ = 6;
      beta_gamma = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.01,
                     lp__, Nloc_trad);
      Eigen::Matrix<local_scalar_t__,-1,1> p11_trad =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p_trad =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      std::vector<local_scalar_t__> coef =
        std::vector<local_scalar_t__>(coef_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_trad =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      std::vector<local_scalar_t__> E_trans =
        std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(mu_trad,
        stan::math::elt_divide(alpha_gamma, beta_gamma),
        "assigning variable mu_trad");
      current_statement__ = 18;
      stan::model::assign(p11_trad,
        calc_p11(Nloc_trad, mu_trad, mat_site, trad_ind, alpha, pstream__),
        "assigning variable p11_trad");
      current_statement__ = 19;
      stan::model::assign(p_trad,
        stan::math::add(p11_trad, stan::math::exp(log_p10)),
        "assigning variable p_trad");
      current_statement__ = 21;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 20;
        stan::model::assign(coef,
          stan::math::to_array_1d(
            stan::math::append_row(1, stan::math::add(1, q_trans))),
          "assigning variable coef");
      }
      current_statement__ = 24;
      for (int j = 1; j <= n_C; ++j) {
        current_statement__ = 22;
        stan::model::assign(E_trans,
          (stan::model::rvalue(n_E, "n_E", stan::model::index_uni(j)) +
          0.0000000000001), "assigning variable E_trans",
          stan::model::index_uni(j));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "p11_trad", p11_trad, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "p11_trad", p11_trad, 1);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "p_trad", p_trad, 0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "p_trad", p_trad, 1);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "coef", coef, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "mu_trad", mu_trad, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "E_trans", E_trans, 0);
      {
        current_statement__ = 31;
        stan::math::validate_non_negative_index("lambda", "n_C", n_C);
        std::vector<local_scalar_t__> lambda =
          std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
        current_statement__ = 33;
        stan::model::assign(lambda,
          get_lambda_continuous(ctch, coef, mat, alpha_gamma, R_ind, n_C,
            pstream__), "assigning variable lambda");
        current_statement__ = 36;
        for (int j = 1; j <= n_C; ++j) {
          current_statement__ = 34;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(E_trans, "E_trans",
                             stan::model::index_uni(j)),
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_uni(j)),
                           stan::model::rvalue(beta_gamma, "beta_gamma",
                             stan::model::index_uni(
                               stan::model::rvalue(R_ind, "R_ind",
                                 stan::model::index_uni(j))))));
        }
        current_statement__ = 39;
        for (int i = 1; i <= n_S; ++i) {
          current_statement__ = 37;
          lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                           stan::model::rvalue(n_K, "n_K",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(n_N, "n_N",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(p_trad, "p_trad",
                             stan::model::index_uni(
                               stan::model::rvalue(L_ind, "L_ind",
                                 stan::model::index_uni(i))))));
        }
        current_statement__ = 43;
        if (stan::math::logical_gt(Nloc_dna, 0)) {
          current_statement__ = 42;
          for (int i = 1; i <= S_dna; ++i) {
            current_statement__ = 40;
            lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                             stan::model::rvalue(K_dna, "K_dna",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(N_dna, "N_dna",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(p_dna, "p_dna",
                               stan::model::index_uni(
                                 stan::model::rvalue(L_dna, "L_dna",
                                   stan::model::index_uni(i))))));
          }
        }
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(log_p10,
                         stan::model::rvalue(p10priors, "p10priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(p10priors, "p10priors",
                           stan::model::index_uni(2))));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha,
                         stan::model::rvalue(alphapriors, "alphapriors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(alphapriors, "alphapriors",
                           stan::model::index_uni(2))));
        current_statement__ = 46;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(beta_gamma,
                         stan::model::rvalue(bgammapriors, "bgammapriors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(bgammapriors, "bgammapriors",
                           stan::model::index_uni(2))));
        current_statement__ = 47;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(alpha_gamma,
                         stan::model::rvalue(agammapriors, "agammapriors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(agammapriors, "agammapriors",
                           stan::model::index_uni(2))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_joint_continuous_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double log_p10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      log_p10 = in__.template read_constrain_ub<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<double> p_dna =
        std::vector<double>(Nloc_dna,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      p_dna = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, Nloc_dna);
      Eigen::Matrix<double,-1,1> q_trans =
        Eigen::Matrix<double,-1,1>::Constant(nparams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      q_trans = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-0.99999,
                  lp__, nparams);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(nsitecov,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nsitecov);
      Eigen::Matrix<double,-1,1> alpha_gamma =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      alpha_gamma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, Nloc_trad);
      Eigen::Matrix<double,-1,1> beta_gamma =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      beta_gamma = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.01,
                     lp__, Nloc_trad);
      Eigen::Matrix<double,-1,1> p11_trad =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p_trad =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> coef =
        std::vector<double>(coef_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_trad =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> E_trans =
        std::vector<double>(n_C, std::numeric_limits<double>::quiet_NaN());
      out__.write(log_p10);
      out__.write(p_dna);
      out__.write(q_trans);
      out__.write(alpha);
      out__.write(alpha_gamma);
      out__.write(beta_gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 17;
      stan::model::assign(mu_trad,
        stan::math::elt_divide(alpha_gamma, beta_gamma),
        "assigning variable mu_trad");
      current_statement__ = 18;
      stan::model::assign(p11_trad,
        calc_p11(Nloc_trad, mu_trad, mat_site, trad_ind, alpha, pstream__),
        "assigning variable p11_trad");
      current_statement__ = 19;
      stan::model::assign(p_trad,
        stan::math::add(p11_trad, stan::math::exp(log_p10)),
        "assigning variable p_trad");
      current_statement__ = 21;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 20;
        stan::model::assign(coef,
          stan::math::to_array_1d(
            stan::math::append_row(1, stan::math::add(1, q_trans))),
          "assigning variable coef");
      }
      current_statement__ = 24;
      for (int j = 1; j <= n_C; ++j) {
        current_statement__ = 22;
        stan::model::assign(E_trans,
          (stan::model::rvalue(n_E, "n_E", stan::model::index_uni(j)) +
          0.0000000000001), "assigning variable E_trans",
          stan::model::index_uni(j));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "p11_trad", p11_trad, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "p11_trad", p11_trad, 1);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "p_trad", p_trad, 0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "p_trad", p_trad, 1);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "coef", coef, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "mu_trad", mu_trad, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "E_trans", E_trans, 0);
      if (emit_transformed_parameters__) {
        out__.write(p11_trad);
        out__.write(p_trad);
        out__.write(coef);
        out__.write(mu_trad);
        out__.write(E_trans);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> q =
        Eigen::Matrix<double,-1,1>::Constant(nparams,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      double p10 = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,-1> mu =
        Eigen::Matrix<double,-1,-1>::Constant(mu_1dim__, mu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 25;
      p10 = stan::math::exp(log_p10);
      current_statement__ = 27;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 26;
        stan::model::assign(q, stan::math::add(q_trans, 1),
          "assigning variable q");
      }
      current_statement__ = 28;
      stan::model::assign(beta,
        stan::math::multiply(
          stan::model::rvalue(mat_site, "mat_site",
            stan::model::index_multi(trad_ind)), alpha),
        "assigning variable beta");
      current_statement__ = 29;
      stan::model::assign(mu,
        calc_mu(trad_ind, dna_ind, mu_trad, ctch, nparams, q, Nloc_dna,
          Nloc_trad, p_dna, p10, mat_site, alpha, pstream__),
        "assigning variable mu");
      current_statement__ = 30;
      stan::model::assign(log_lik,
        calc_loglik_continuous(ctch, coef, mat, alpha_gamma, beta_gamma,
          R_ind, E_trans, n_K, n_N, p_trad, L_ind, n_C, n_S, S_dna, Nloc_dna,
          K_dna, N_dna, p_dna, L_dna, pstream__),
        "assigning variable log_lik");
      out__.write(q);
      out__.write(log_lik);
      out__.write(p10);
      out__.write(mu);
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ log_p10 = DUMMY_VAR__;
      current_statement__ = 1;
      log_p10 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, log_p10);
      std::vector<local_scalar_t__> p_dna =
        std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(p_dna,
        in__.read<std::vector<local_scalar_t__>>(Nloc_dna),
        "assigning variable p_dna");
      out__.write_free_lub(0, 1, p_dna);
      Eigen::Matrix<local_scalar_t__,-1,1> q_trans =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nparams, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(q_trans,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nparams),
        "assigning variable q_trans");
      out__.write_free_lb(-0.99999, q_trans);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsitecov, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nsitecov),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(alpha_gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nloc_trad),
        "assigning variable alpha_gamma");
      out__.write_free_lb(0, alpha_gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(beta_gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nloc_trad),
        "assigning variable beta_gamma");
      out__.write_free_lb(0.01, beta_gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "log_p10",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "p_dna", "double",
        std::vector<size_t>{static_cast<size_t>(Nloc_dna)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "q_trans",
        "double", std::vector<size_t>{static_cast<size_t>(nparams)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(nsitecov)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "alpha_gamma",
        "double", std::vector<size_t>{static_cast<size_t>(Nloc_trad)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "beta_gamma",
        "double", std::vector<size_t>{static_cast<size_t>(Nloc_trad)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ log_p10 = DUMMY_VAR__;
      current_statement__ = 1;
      log_p10 = context__.vals_r("log_p10")[(1 - 1)];
      out__.write_free_ub(0, log_p10);
      std::vector<local_scalar_t__> p_dna =
        std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
      current_statement__ = 2;
      p_dna = context__.vals_r("p_dna");
      out__.write_free_lub(0, 1, p_dna);
      Eigen::Matrix<local_scalar_t__,-1,1> q_trans =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nparams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> q_trans_flat__;
        current_statement__ = 3;
        q_trans_flat__ = context__.vals_r("q_trans");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(q_trans, q_trans_flat__[(pos__ - 1)],
            "assigning variable q_trans", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(-0.99999, q_trans);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsitecov, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 4;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_gamma_flat__;
        current_statement__ = 5;
        alpha_gamma_flat__ = context__.vals_r("alpha_gamma");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(alpha_gamma, alpha_gamma_flat__[(pos__ - 1)],
            "assigning variable alpha_gamma", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, alpha_gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc_trad,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_gamma_flat__;
        current_statement__ = 6;
        beta_gamma_flat__ = context__.vals_r("beta_gamma");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(beta_gamma, beta_gamma_flat__[(pos__ - 1)],
            "assigning variable beta_gamma", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0.01, beta_gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"log_p10", "p_dna", "q_trans",
                "alpha", "alpha_gamma", "beta_gamma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"p11_trad", "p_trad", "coef", "mu_trad", "E_trans"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"q", "log_lik", "p10", "mu", "beta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(Nloc_dna)},
                std::vector<size_t>{static_cast<size_t>(nparams)},
                std::vector<size_t>{static_cast<size_t>(nsitecov)},
                std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
                std::vector<size_t>{static_cast<size_t>(Nloc_trad)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(coef_1dim__)},
             std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(n_C)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nparams)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(mu_1dim__),
               static_cast<size_t>(mu_2dim__)},
             std::vector<size_t>{static_cast<size_t>(Nloc_trad)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "log_p10");
    for (int sym1__ = 1; sym1__ <= Nloc_dna; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_dna" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
      param_names__.emplace_back(std::string() + "q_trans" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p11_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= coef_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "coef" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_C; ++sym1__) {
        param_names__.emplace_back(std::string() + "E_trans" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        param_names__.emplace_back(std::string() + "q" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p10");
      for (int sym1__ = 1; sym1__ <= mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mu_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "log_p10");
    for (int sym1__ = 1; sym1__ <= Nloc_dna; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_dna" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
      param_names__.emplace_back(std::string() + "q_trans" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p11_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= coef_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "coef" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_C; ++sym1__) {
        param_names__.emplace_back(std::string() + "E_trans" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        param_names__.emplace_back(std::string() + "q" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p10");
      for (int sym1__ = 1; sym1__ <= mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mu_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"log_p10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_dna\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_dna) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"q_trans\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsitecov) + "},\"block\":\"parameters\"},{\"name\":\"alpha_gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"parameters\"},{\"name\":\"beta_gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"parameters\"},{\"name\":\"p11_trad\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_trad\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(coef_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_trad\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"transformed_parameters\"},{\"name\":\"E_trans\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"p10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_1dim__) + ",\"cols\":" + std::to_string(mu_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"log_p10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_dna\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_dna) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"q_trans\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsitecov) + "},\"block\":\"parameters\"},{\"name\":\"alpha_gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"parameters\"},{\"name\":\"beta_gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"parameters\"},{\"name\":\"p11_trad\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_trad\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(coef_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_trad\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"transformed_parameters\"},{\"name\":\"E_trans\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"p10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_1dim__) + ",\"cols\":" + std::to_string(mu_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + Nloc_dna) + nparams) + nsitecov) +
      Nloc_trad) + Nloc_trad);
    const size_t num_transformed = emit_transformed_parameters *
      (((((Nloc_trad + Nloc_trad) + coef_1dim__) + Nloc_trad) + n_C));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((nparams + log_lik_1dim__) + 1) + (mu_1dim__ * mu_2dim__)) +
      Nloc_trad));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + Nloc_dna) + nparams) + nsitecov) +
      Nloc_trad) + Nloc_trad);
    const size_t num_transformed = emit_transformed_parameters *
      (((((Nloc_trad + Nloc_trad) + coef_1dim__) + Nloc_trad) + n_C));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((nparams + log_lik_1dim__) + 1) + (mu_1dim__ * mu_2dim__)) +
      Nloc_trad));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_joint_continuous_namespace::model_joint_continuous;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_joint_continuous_namespace::profiles__;
}
#endif
#endif
